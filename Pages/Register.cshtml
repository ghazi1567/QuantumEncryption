@page
@model QuantumEncryption.Pages.RegisterModel
@{
    ViewData["Title"] = "Register";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
<style>
    table th,table td {
        text-align: center !important;
    }
    .form-check-label {
    margin-bottom: 0;
    margin-left: 20px;
}
</style>
<form >
    <div class="row" >


        <div class="col-md-6">
            <div class="form-group">
                <label for="exampleInputEmail1">Name</label>
                <input type="text" class="form-control" aria-describedby="emailHelp" placeholder="Enter Name">
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">CNIC</label>
                <input type="text" class="form-control" placeholder="CNIC">
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <input type="password" class="form-control"  placeholder="Password">
            </div>
            <div class="form-group">
                <label for="exampleFormControlSelect1">Key Length</label>
                <select class="form-control" id="Key" onchange="keyChange()">
                    <option value="">select key length</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                    <option>6</option>
                    <option>7</option>
                    <option>8</option>
                    <option>9</option>
                    <option>10</option>
                    <option>11</option>
                </select>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="exampleCheck1">
                <label class="form-check-label" for="exampleCheck1">Check you have provide the correct information it would be use for communication over the network</label>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
        <div class="col-md-6">
            <label for="exampleInputEmail1">Select Bases</label>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col"><span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-45deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-90deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-135deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><button type="button" class="btn btn-primary" onclick="BaseSelection(0)">0 &#xb0;</button></td>
                        <td><button type="button" class="btn btn-primary" onclick="BaseSelection(45)">45 &#xb0;</button></td>
                        <td><button type="button" class="btn btn-primary" onclick="BaseSelection(90)">90 &#xb0;</button></td>
                        <td><button type="button" class="btn btn-primary" onclick="BaseSelection(135)">135 &#xb0;</button></td>
                    </tr>

                </tbody>
            </table>
            <label for="exampleInputEmail1">Selected Bases</label>
            <a href="javascript:void(0);" onclick="ResetBases();">Reset</a>
            <table class="table table-bordered" id="selectedBases">
                <tbody>
                    @*<tr>
                        <th scope="col"><span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-45deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-90deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                        <th scope="col"><span style="transform: rotate(-135deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></th>
                    </tr>
                    <tr>
                        <td>0 &#xb0;</td>
                        <td>0 &#xb0;</td>
                        <td>0 &#xb0;</td>
                        <td>0 &#xb0;</td>
                    </tr>*@

                </tbody>
            </table>
        </div>

     

    </div>

</form>

<script>
    var selectedBase = new Array();
    var col = 0;
    function keyChange() {
       var value = $("#Key option:selected").val();
        console.log(value);
        col = parseInt(value);
        puplateBases()

       
    }

    function BaseSelection(value) {
        if (col ==0) {
            alert('Please select key length');
            return;
        }
        selectedBase.push(value);
        puplateBases();
    }

    function puplateBases() {
       var head = '<tr>';
        var row = '<tr>';
        for (var i = 0; i < col; i++) {

            head += '<th scope="col">'+ getHeadValue(i) +'</th>';
            row += '<th scope="col">'+ getRowValue(i) +'</th>';

        }
           head += '</tr>';
        row += '</tr>';
         $('#selectedBases tbody').empty().append(head).append(row);
    }

    function getHeadValue(index) {
        if (selectedBase.length > 0) {
            if (typeof selectedBase[index] !== 'undefined') {
                if (selectedBase[index] == 0 ) {
                    return '<span class="glyphicon glyphicon-arrow-right" aria-hidden="true">';
                }
                return '<span style="transform: rotate(-'+ selectedBase[index] +'deg);" class="glyphicon glyphicon-arrow-right" aria-hidden="true">';
            }
            else {
                 return '';
            }
           
        } else {
            return '';
        }
    }
    function getRowValue(index) {
        if (selectedBase.length > 0) {
            if (typeof selectedBase[index] !== 'undefined') {
                return ''+ selectedBase[index] +' &#xb0;';
            }
            else {
                 return '';
            }
           
        } else {
            return '';
        }
    }
    function ResetBases(){
        selectedBase = new Array();
        puplateBases();
    }
   
</script>